# -*- coding: utf-8 -*-
"""Air Quality Monitoring .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vvbg97FoFsDA0AYK3dV1FXO8Q-fc0s50
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error

df=pd.read_csv('/content/drive/MyDrive/updated_pollution_dataset.csv')
df.head()

df.isnull().sum()

df.info()

df.describe()

correlation_matrix = df[['PM2.5', 'PM10', 'NO2', 'CO', 'SO2', 'Temperature', 'Humidity']].corr()
plt.figure(figsize=(8,6))
sns.heatmap(correlation_matrix,annot=True,cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

x = df[['PM2.5','PM10','NO2','SO2','CO']]

kmeans=KMeans(n_clusters=3)
df['cluster']=kmeans.fit_predict(x)

plt.figure(figsize=(8,6))
plt.scatter(df['PM2.5'],df['PM10'],c=df['cluster'],cmap='viridis')
plt.xlabel('PM2.5')
plt.ylabel('PM10')
plt.title('Cluster')
plt.colorbar(label='cluster')
plt.show()

df[['PM2.5', 'PM10', 'NO2', 'CO', 'SO2', 'Humidity']].groupby(['PM2.5', 'PM10', 'NO2', 'CO', 'SO2']).median().sort_values(by='Humidity', ascending=False).head(10).plot.bar(color='orange')

df[['PM2.5', 'PM10', 'NO2', 'CO', 'SO2', 'Temperature']].groupby(['PM2.5', 'PM10', 'NO2', 'CO', 'SO2']).median().sort_values(by='Temperature', ascending=False).head(10).plot.bar(color='orange')

le = LabelEncoder()
df['Air Quality encoded'] = le.fit_transform(df['Air Quality'])

df['Air Quality encoded'] = pd.to_numeric(df['Air Quality encoded'], errors='coerce')
df.dropna(subset=['Air Quality encoded'], inplace=True)

x = df[['PM2.5','PM10','NO2','SO2','CO','Temperature','Humidity']]
y = df['Air Quality encoded']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

model = LinearRegression()
model.fit(x_train,y_train)

y_pred = model.predict(x_test)

r2=r2_score(y_test,y_pred)
print(f'r2 Score:{r2}')

mae=mean_absolute_error(y_test,y_pred)
print(f'Mean Absolute Error:{mae}')

mse=mean_squared_error(y_test,y_pred)
print(f'Mean Squared Error:{mse}')



